
funlen:
  # Checks the number of lines in a function.
  # If lower than 0, disable the check.
  # Default: 60
  lines: 100
  # Checks the number of statements in a function.
  # If lower than 0, disable the check.
  # Default: 40
  statements: 50
  # Ignore comments when counting lines.
  # Default false
  ignore-comments: true

gocognit:
  # Minimal code complexity to report.
  # Default: 30 (but we recommend 10-20)
  min-complexity: 20

gocritic:
  # Settings passed to gocritic.
  # The settings key is the name of a supported gocritic checker.
  # The list of supported checkers can be find in https://go-critic.github.io/overview.
  settings:
    captLocal:
      # Whether to restrict checker to params only.
      # Default: true
      paramsOnly: false
    underef:
      # Whether to skip (*x).method() calls where x is a pointer receiver.
      # Default: true
      skipRecvDeref: false

gomnd:
  # List of function patterns to exclude from analysis.
  # Values always ignored: `time.Date`,
  # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
  # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
  # Default: []
  ignored-functions:
    - flag.Arg
    - flag.Duration.*
    - flag.Float.*
    - flag.Int.*
    - flag.Uint.*
    - os.Chmod
    - os.Mkdir.*
    - os.OpenFile
    - os.WriteFile
    - prometheus.ExponentialBuckets.*
    - prometheus.LinearBuckets
    -
gomodguard:
  blocked:
    # List of blocked modules.
    # Default: []
    modules:
      - github.com/golang/protobuf:
          recommendations:
            - google.golang.org/protobuf
          reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
      - github.com/satori/go.uuid:
          recommendations:
            - github.com/google/uuid
          reason: "satori's package is not maintained"
      - github.com/gofrs/uuid:
          recommendations:
            - github.com/gofrs/uuid/v5
          reason: "gofrs' package was not go module before v5"

govet:
  # Enable all analyzers.
  # Default: false
  enable-all: true
  # Disable analyzers by name.
  # Run `go tool vet help` to see all analyzers.
  # Default: []
  disable:
    - fieldalignment # too strict
  # Settings per analyzer.
  settings:
    shadow:
      # Whether to be strict about shadowing; can be noisy.
      # Default: false
      strict: true

inamedparam:
  # Skips check for interface methods with only a single parameter.
  # Default: false
  skip-single-param: true

nakedret:
  # Make an issue if func has more lines of code than this setting, and it has naked returns.
  # Default: 30
  max-func-lines: 0

nolintlint:
  # Exclude following linters from requiring an explanation.
  # Default: []
  allow-no-explanation: [ funlen, gocognit, lll ]
  # Enable to require an explanation of nonzero length after each nolint directive.
  # Default: false
  require-explanation: true
  # Enable to require nolint directives to mention the specific linter being suppressed.
  # Default: false
  require-specific: true

perfsprint:
  # Optimizes into strings concatenation.
  # Default: true
  strconcat: false

linters:
  disable-all: true
  enable:
    ## enabled by default
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gosimple # specializes in simplifying a code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks for unused constants, variables, functions and types
    ## disabled by default
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - cyclop # checks function and package cyclomatic complexity
    - dupl # tool for code clone detection
    - durationcheck # checks for two durations multiplied together
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - execinquery # checks query string in Query function which reads your Go src files and warning it finds
    - exhaustive # checks exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # forbids identifiers
    - funlen # tool for detection of long functions
    - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gochecksumtype # checks exhaustiveness on Go "sum types"
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomnd # detects magic numbers
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - lll # reports long lines
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - musttag # enforces field tags in (un)marshaled structs
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - promlinter # checks Prometheus metrics naming via promlint
    - protogetter # reports direct reads from proto message fields when getters should be used
    - reassign # checks that package variables are not reassigned
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sloglint # ensure consistent code style when using log/slog
    - spancheck # checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - stylecheck # is a replacement for golint
    - tenv # detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # checks if examples are testable (have an expected output)
    - testifylint # checks usage of github.com/stretchr/testify
    - testpackage # makes you use a separate _test package
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace

issues:
  exclude:
    - Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked
    - Error return value of `tx.Rollback` is not checked
    - Error return value of `tx.Commit` is not checked