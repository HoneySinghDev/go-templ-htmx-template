package site

import (
	"net/http"
	"github.com/angelofallars/htmx-go"
)

// Render an error message to return to the user.
func RenderError(w http.ResponseWriter, code int, err error) {
	htmx.NewResponse().
		Reswap(htmx.SwapBeforeEnd).
		Retarget("#errors").
		StatusCode(code).
		RenderTempl(context.Background(), w, errorMessage(err))
}

templ errorMessage(err error) {
	<div x-data="{ showError: true }"
      x-init="setTimeout(() => { $el.classList.add('err-fadeout'); setTimeout(() => { showError = false }, 250); }, 10000)"
      x-show="showError"
 		class={
			"w-72",
			"px-4", "py-4",
			"bg-red-200",
			"border-2",
			"border-red-700",
			"text-red-700",
			"rounded-xl",
			"flex",
			"justify-between",
			"err-fadein",
		}
	>
		<div>{ err.Error() }</div>
		<button
 			 @click="$el.closest('div').classList.add('err-fadeout'); setTimeout(() => { showError = false }, 250);"
                    class="font-bold"
 			class="font-bold"
		>
			X
		</button>
	</div>
}

templ errors() {
	<div id="errors" class="absolute bottom-4 right-4 flex flex-col-reverse gap-2"></div>
}

script scriptErrorInit() {
    htmx.on('htmx:beforeSwap', function(evt) {
        if (evt.detail.xhr.status >= 400){
            evt.detail.shouldSwap = true;
            evt.detail.isError = false;
        }
    });
}